import process from "process";
import { join } from "path";
import {
  mkdir,
  rm,
  writeFile,
} from "fs/promises";
import { copy } from "esbuild-plugin-copy";
import type { Plugin } from "esbuild";
import * as esbuild from "esbuild";
import builtins from "builtin-modules";
import envConfig from "./env.config.mts";
import { readFileSync } from "fs";

const banner: string = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod: boolean = process.argv[2] === "production";

const entryPoints = [
  "src/manifest.json",
  "src/main.ts",
  "src/styles.css",
].filter(
  (file) => readFileSync(file, "utf8").trim().length > 0,
);

const options = {
  banner: { js: banner },
  entryPoints,
  bundle: true,
  minify: prod,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/closebrackets",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/comment",
    "@codemirror/fold",
    "@codemirror/gutter",
    "@codemirror/highlight",
    "@codemirror/history",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/matchbrackets",
    "@codemirror/panel",
    "@codemirror/rangeset",
    "@codemirror/rectangular-selection",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/stream-parser",
    "@codemirror/text",
    "@codemirror/tooltip",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  mainFields: [
    "svelte",
    "browser",
    "module",
    "main",
  ],
  format: "cjs",
  target: "ES2020",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outdir: "./dist",
  plugins: [...getDevPlugins()],
  loader: { ".json": "copy" },
} satisfies esbuild.BuildOptions;

if (!prod) {
  const context = await esbuild.context(options);
  await context.watch();
}
else {
  esbuild.build(options).catch(() => process.exit(1));
}

function getDevPlugins(): Plugin[] {
  if (!envConfig.OBSIDIAN_DEVELOPMENT_VAULT_PATH) {
    return [];
  }

  const pluginPath = join(envConfig.OBSIDIAN_DEVELOPMENT_VAULT_PATH, ".obsidian/plugins/obsidian-dataview-table-cache");

  const cleanseDevFaultPluginDir: Plugin = {
    name: "cleanse-dev-fault-plugin-dir",
    setup(build): void {
      build.onEnd(() => {
        return rm(pluginPath, {
          recursive: true,
          force: true,
        });
      });
    },
  };

  const createHotReloadFileInDevVaultPlugin: Plugin = {
    name: "create-hotreload-in-dev-vault",
    setup(build): void {
      build.onEnd(async () => {
        await mkdir(pluginPath, { recursive: true });
        await writeFile(join(pluginPath, ".hotreload"), "");
      });
    },
  };

  const copyToDevFaultPlugin: Plugin = copy({
    resolveFrom: "out",
    assets: [
      {
        from: ["dist/**/*"],
        to: [pluginPath],
      },
    ],
    watch: !prod,
  });

  return [
    cleanseDevFaultPluginDir,
    createHotReloadFileInDevVaultPlugin,
    copyToDevFaultPlugin,
  ];
}
